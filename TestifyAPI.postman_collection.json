{
	"info": {
		"_postman_id": "46d1009e-06af-4cef-a489-8b88ccfe6044",
		"name": "TestifyAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32683740"
	},
	"item": [
		{
			"name": "PersonalInfo",
			"item": [
				{
					"name": "GetPersonalInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"pm.test(\"Status String\", function()\r",
									"{\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"pm.test(\"Response Time\", function()\r",
									"{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"pm.test(\"Array\", function()\r",
									"{\r",
									"    var res = pm.response.json();\r",
									"    console.log(res);\r",
									"   pm.expect(res).to.be.an('array');\r",
									"})\r",
									"\r",
									"pm.test(\"Verfying Response\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"    console.log(resbody);\r",
									"    pm.expect(resbody[0]).to.have.property(\"name\", \"Nayab Akhtar\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verfying Phone Number\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"    console.log(resbody);\r",
									"pm.expect(resbody[0]).to.have.property(\"phone\", \"+1234567890\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/PInfo",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"PInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post_Personal_Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Status String Created\", function()\r",
									"{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time\", function()\r",
									"{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"pm.test(\"Content Type\", function()\r",
									"{\r",
									"    var header= pm.response.headers.get('Content-Type');\r",
									"    pm.expect(header).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Body\", function()\r",
									"{\r",
									" var resbody= pm.response.json();\r",
									" pm.expect(resbody).to.have.property('age', 277);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"name\": \"Nackat\",\r\n        \"age\": 277,\r\n        \"email\": \"nayab@example.com\",\r\n        \"phone\": \"+1234567890\",\r\n        \"address\": {\r\n            \"street\": \"123 Main Street\",\r\n            \"city\": \"Rawalpindi\",\r\n            \"state\": \"Pakistan\",\r\n            \"postal_code\": \"12345\"\r\n        }\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/PInfo",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"PInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put-PInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Status String OK\", function()\r",
									"{\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time\", function()\r",
									"{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"pm.test(\"Content Type\", function()\r",
									"{\r",
									"    var header= pm.response.headers.get('Content-Type');\r",
									"    pm.expect(header).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Body\", function()\r",
									"{\r",
									" var resbody= pm.response.json();\r",
									" pm.expect(resbody).to.have.property('name', 'Shakeela');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": \"9cf6\",\r\n        \"name\": \"Shakeela\"\r\n   \r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/PInfo/334d",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"PInfo",
								"334d"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch-Pinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Status String OK\", function()\r",
									"{\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time\", function()\r",
									"{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"pm.test(\"Content Type\", function()\r",
									"{\r",
									"    var header= pm.response.headers.get('Content-Type');\r",
									"    pm.expect(header).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Body\", function()\r",
									"{\r",
									" var resbody= pm.response.json();\r",
									" pm.expect(resbody).to.have.property('age', 32);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"age\": 32\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/PInfo/4a62",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"PInfo",
								"4a62"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Pinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status String Not Found\", function()\r",
									"{\r",
									"    pm.response.to.have.status('Not Found');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time\", function()\r",
									"{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"pm.test(\"Content Type\", function()\r",
									"{\r",
									"    var header= pm.response.headers.get('Content-Type');\r",
									"    pm.expect(header).to.include('text/plain; charset=utf-8');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/PInfo/afb5",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"PInfo",
								"afb5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Education",
			"item": [
				{
					"name": "Get_Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Status string OK\", function()\r",
									"{\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time Below 200\", function()\r",
									"{\r",
									" pm.expect(pm.response.responseTime).to.be.below(200);   \r",
									"})\r",
									"\r",
									"pm.test(\"Content Type is Present\", function()\r",
									"{\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"// Data Format Test\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Content Value is application/json\", function()\r",
									"{\r",
									"    var resbody = pm.response.headers.get('Content-Type');\r",
									"    pm.expect(resbody).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is Array\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"  pm.expect(resbody).to.be.an('array');\r",
									"})\r",
									"\r",
									"pm.test(\"Server is not present\", function()\r",
									"{\r",
									"    pm.response.to.not.have.header('server');\r",
									"})\r",
									"\r",
									"pm.test(\"Degree is BSSE\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"    pm.expect(resbody[0]).to.have.property('degree', 'BSSE');\r",
									"})\r",
									"\r",
									"pm.test(\"Degree is FSC\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"    pm.expect(resbody[1]).to.have.property('degree', 'FSC');\r",
									"})\r",
									"\r",
									"// Presence of Required Fields Test\r",
									"pm.test(\"Required fields are present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('major');\r",
									"        pm.expect(item).to.have.property('institution');\r",
									"        pm.expect(item).to.have.property('graduation_year');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/education",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"education"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostEducation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" pm.sendRequest({\r",
									"    url: 'https://postman-echo.com/post',\r",
									"    method: 'POST',\r",
									"}, function (err, response) {\r",
									"    console.log(response.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"degree\": \"SSC\",\r\n        \"major\": \"Computer Science\",\r\n        \"institution\": \"Educare  School\",\r\n        \"graduation_year\": 2015\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/education",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"education"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteEducation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status String Not Found\", function()\r",
									"{\r",
									"    pm.response.to.have.status('Not Found');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time\", function()\r",
									"{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"pm.test(\"Content Type\", function()\r",
									"{\r",
									"    var header= pm.response.headers.get('Content-Type');\r",
									"    pm.expect(header).to.include('text/plain; charset=utf-8');\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/education/1b40",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"education",
								"1b40"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchEducation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"major\": \"Bs in Software Engineering\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/education/e9c7",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"education",
								"e9c7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Work-Experience",
			"item": [
				{
					"name": "Get_Work_Experience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Status string OK\", function()\r",
									"{\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time Below 200\", function()\r",
									"{\r",
									" pm.expect(pm.response.responseTime).to.be.below(200);   \r",
									"})\r",
									"\r",
									"pm.test(\"Content Type is Present\", function()\r",
									"{\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"// Data Format Test\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Content Value is application/json\", function()\r",
									"{\r",
									"    var resbody = pm.response.headers.get('Content-Type');\r",
									"    pm.expect(resbody).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is Array\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"  pm.expect(resbody).to.be.an('array');\r",
									"})\r",
									"\r",
									"pm.test(\"Server is not present\", function()\r",
									"{\r",
									"    pm.response.to.not.have.header('server');\r",
									"})\r",
									"\r",
									"pm.test(\"Degree is BSSE\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"    pm.expect(resbody[0]).to.have.property('company', 'Coders');\r",
									"})\r",
									"\r",
									"// Presence of Required Fields Test\r",
									"pm.test(\"Required fields are present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('position');\r",
									"        pm.expect(item).to.have.property('company');\r",
									"        pm.expect(item).to.have.property('start_date');\r",
									"        pm.expect(item).to.have.property('end_date');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/work_experience",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"work_experience"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post-WorkExperience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response Time\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying Response\", function(){\r",
									"var resbody= pm.response.json();\r",
									"pm.expect(resbody).to.have.property('position','AI');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"position\": \"AI\",\r\n        \"start_date\": \"2023-07-01\",\r\n        \"end_date\": \"2023-06-30\",\r\n        \"id\": \"3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/work_experience",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"work_experience"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-WorkExperience",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/work_experience/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"work_experience",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch-Work-Experience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"position\": \"SDET\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/work_experience/3",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"work_experience",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Skills",
			"item": [
				{
					"name": "Get_Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    let a= pm.response.json();\r",
									" pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Status string OK\", function()\r",
									"{\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time Below 200\", function()\r",
									"{\r",
									" pm.expect(pm.response.responseTime).to.be.below(200);   \r",
									"})\r",
									"\r",
									"pm.test(\"Content Type is Present\", function()\r",
									"{\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"\r",
									"// Data Format Test\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Content Value is application/json\", function()\r",
									"{\r",
									"    var resbody = pm.response.headers.get('Content-Type');\r",
									"    pm.expect(resbody).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response is Array\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"  pm.expect(resbody).to.be.an('array');\r",
									"})\r",
									"\r",
									"pm.test(\"Server is not present\", function()\r",
									"{\r",
									"    pm.response.to.not.have.header('server');\r",
									"})\r",
									"\r",
									"pm.test(\"Degree is BSSE\", function()\r",
									"{\r",
									"    var resbody= pm.response.json();\r",
									"    pm.expect(resbody[2]).to.have.property('name', 'SQL Server');\r",
									"})\r",
									"\r",
									"// Presence of Required Fields Test\r",
									"pm.test(\"Required fields are present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('category');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/skills",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postskills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Status String Created\", function()\r",
									"{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Time\", function()\r",
									"{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"pm.test(\"Content Type\", function()\r",
									"{\r",
									"    var header= pm.response.headers.get('Content-Type');\r",
									"    pm.expect(header).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response Body\", function()\r",
									"{\r",
									" var resbody= pm.response.json();\r",
									" pm.expect(resbody).to.have.property('name', 'Python');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"id\": \"5\",\r\n        \"name\": \"Python\",\r\n        \"category\": \"Programming Languages\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/skills",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put-Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"id\": \"4\",\r\n        \"name\": \"Git hub\",\r\n        \"category\": \"Other\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/skills/4",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"skills",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch-Skills",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": \"1\",\r\n        \"name\": \"C Sharp\",\r\n        \"category\": \"Programming Languages\",\r\n        \"Additional\" : \"ETC\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/skills/1",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"skills",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Skills",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/skills/5",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"skills",
								"5"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "",
			"type": "string"
		}
	]
}